TODO:

PROVEN DESIGN:
  incorporate refined parameters into crust initialization
  refactor: transform FormationGeneration to map: grid×id → stratum
  sealevel calculation
  physically based surface rendering
  physically based atmospheric rendering
  physically based solar disc rendering
  physically based rendering for generic spheres
  physically based star rendering
  metamorphosis
  lithification
  erosion
  supercontinent cycle using existing js method
  temperature estimates via max entropy production principle (MEPP)
  ice as a mineral
  handwavey precipitation and fluid models from js
  orbital mechanics assuming elliptical orbits
  stellar motion and orbital perturbation via barnes hutt algorithm
    needs universal formulation

SIMPLE DESIGN:
  csv reader 
  deserializer for orbits
  deserializer for compound properties

UNTESTED DESIGN:
  lod
  expanded mineral types
  orbital mechanics via universal formulation
  density towers
  selection of points on a grid

SPECULATIVE OR UNCERTAIN DESIGN:
  supercontinent cycle using more dynamic plate fracture
  physically based cloud rendering
  impose forces that result in slow down due to continent-continent collision
  full 3d climate simulation
  defensible/generic precipitation and fluid models
  models for primary producers
  models for secondary producers 

graphics optimizations:
* use gl_FragCoord with depth testing to render atmosphere using a coarse spheroid mesh
* find way to send procedural data directly to gl buffer, possibly using glBufferSubData or glMapBuffer: 
  https://learnopengl.com/Advanced-OpenGL/Advanced-Data
* find way to incrementally update buffer for LOD chunks using glBufferSubData
* use gl_VertexId to procedurally offset vertices of LOD chunks
* use gl_VertexId (gl_InstanceId for vector rasters) to procedurally generate vertex positions (requires a dedicated `*ShaderProgram` for each grid)
* "billboard clouds" for rendering galaxies

